#!/usr/bin/perl

package SphinxSearch::GenSphinxConf;
use lib qw( lib extlib );

use base qw( MT::Tool );
use strict;
use warnings;

my $verbose;

my $bin_path;
my $file_path;
my $conf_path;
my $conf_type;

my $db_host;
my $db_user;
my $db_pass;

sub options {
    return (
        'verbose+'    => \$verbose,
        'bin_path=s'  => \$bin_path,
        'file_path=s' => \$file_path,
        'conf_path=s' => \$conf_path,
        'conf_type=s'  => \$conf_type,
        'host=s'      => \$db_host,
        'user=s'      => \$db_user,
        'pass=s'      => \$db_pass,
    );
}

sub main {
    my $self = shift;
    ($verbose) = $self->SUPER::main(@_);
    my $plugin = MT::Plugin::SphinxSearch->instance;

    $plugin->set_config_value( 'sphinx_path', $bin_path, 'system' )
      if ($bin_path);
    $plugin->set_config_value( 'sphinx_file_path', $file_path, 'system' )
      if ($file_path);
    $plugin->set_config_value( 'sphinx_conf_path', $conf_path, 'system' )
      if ($conf_path);

	if($conf_type && $conf_type ne '' && $conf_type !~ /^(db|xml)$/ ) {
		print "Invalid conf_type: $conf_type. Options are [db or xml]\n";
		return 1;
	}
    $plugin->set_config_value( 'sphinx_conf_type', $conf_type, 'system' )
      if ($conf_type && $conf_type ne '' && $conf_type =~ /^(db|xml)$/);
    $conf_type = $plugin->get_config_value( 'sphinx_conf_type', 'system' ) || '';
	
    $plugin->set_config_value( 'db_host', $db_host, 'system' ) if ($db_host);
    $plugin->set_config_value( 'db_user', $db_user, 'system' ) if ($db_user);
    $plugin->set_config_value( 'db_pass', $db_pass, 'system' ) if ($db_pass);

    require SphinxSearch::Config;
    my $tmpl = SphinxSearch::Config->_gen_sphinx_conf_tmpl;
    my $str  = $tmpl->output;
    print "$str\n";
}

__PACKAGE__->main unless caller;
